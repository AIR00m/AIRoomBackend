name: CD

on:
  workflow_run:
    workflows: ["CI"]
    types:
      - completed

jobs:
  cd:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest

    steps:
      - name: üåç Get GitHub Action Runner IP
        id: myip
        run: |
          echo "ip=$(curl -s https://checkip.amazonaws.com)" >> $GITHUB_OUTPUT
        shell: bash

      - name: ‚òÅÔ∏è Add SSH IP to AWS Security Group
        run: |
          aws ec2 authorize-security-group-ingress \
            --group-id ${{ secrets.AWS_SECURITY_GROUP_ID }} \
            --protocol tcp \
            --port 22 \
            --cidr ${{ steps.myip.outputs.ip }}/32
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}

      - name: üöÄ SSH & Blue-Green Deploy with Nginx Dynamic Reload
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_KEY }}
          script: |
            IMAGE=${{ secrets.DOCKERHUB_USERNAME }}/springboot-app:latest
            echo "[+] ÌòÑÏû¨ Ïã§Ìñâ Ï§ëÏù∏ Ïª®ÌÖåÏù¥ÎÑà ÌôïÏù∏"
            RUNNING=$(docker ps --format '{{.Names}}' | grep springboot || true)
            if [ "$RUNNING" = "springboot-blue" ]; then
              NEW_CONTAINER="springboot-green"
              OLD_CONTAINER="springboot-blue"
              NEW_PORT=8082
              OLD_PORT=8081
            else
              NEW_CONTAINER="springboot-blue"
              OLD_CONTAINER="springboot-green"
              NEW_PORT=8081
              OLD_PORT=8082
            fi
            echo "[+] ÏÉà Ïª®ÌÖåÏù¥ÎÑà Ïã§Ìñâ: $NEW_CONTAINER"
            docker pull $IMAGE
            docker run -d --name $NEW_CONTAINER -p $NEW_PORT:8080 $IMAGE
            echo "[‚è≥] Health check Ï§ë..."
            for i in {1..10}; do
              if curl -s http://localhost:$NEW_PORT/actuator/health | grep UP; then
                echo "‚úÖ Health check ÏÑ±Í≥µ"
                break
              fi
              echo "‚è± Waiting..."
              sleep 3
              if [ $i -eq 10 ]; then
                echo "‚ùå Health check Ïã§Ìå® ‚Üí Î°§Î∞±"
                docker stop $NEW_CONTAINER
                docker rm $NEW_CONTAINER
                exit 1
              fi
            done
            echo "[‚öôÔ∏è] Nginx ÌîÑÎ°ùÏãú Ìè¨Ìä∏ ÏàòÏ†ï ($NEW_PORT)"
            sudo sed -i "s/localhost:$OLD_PORT/localhost:$NEW_PORT/" /etc/nginx/conf.d/reverse.conf
            sudo nginx -t && sudo systemctl reload nginx
            echo "[üßπ] Ïù¥Ï†Ñ Ïª®ÌÖåÏù¥ÎÑà Ï¢ÖÎ£å Î∞è ÏÇ≠Ï†ú: $OLD_CONTAINER"
            docker stop $OLD_CONTAINER || true
            docker rm $OLD_CONTAINER || true

      - name: üßπ Remove SSH IP from AWS Security Group
        if: always()
        run: |
          aws ec2 revoke-security-group-ingress \
            --group-id ${{ secrets.AWS_SECURITY_GROUP_ID }} \
            --protocol tcp \
            --port 22 \
            --cidr ${{ steps.myip.outputs.ip }}/32
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}