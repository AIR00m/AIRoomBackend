name: CD

on:
  workflow_run:
    workflows: [ "CI" ]
    types: [ completed ]
    branches: [ develop ]


concurrency:
  group: cd-${{ github.event.workflow_run.head_branch || github.ref_name || 'default' }}
  # cancel-in-progress: false  # 직렬 처리(큐잉). 기본 false

jobs:
  cd:
    if: >
      ${{
        github.event.workflow_run.conclusion == 'success' &&
        github.event.workflow_run.event == 'push' &&
        github.event.workflow_run.head_branch == 'develop'
      }}
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: 🔽 Checkout Repository
        uses: actions/checkout@v3

      - name: 📦 docker/ 폴더 전송
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_KEY }}
          source: "docker"
          target: "/home/ubuntu"

      - name: 📂 rsync로 /compose/infra/에 덮어쓰기
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_KEY }}
          command_timeout: 30m
          script: |
            docker network create core-services-net || true
            mkdir -p /home/ubuntu/compose/infra
            rsync -avz --delete /home/ubuntu/docker/ /home/ubuntu/compose/infra/
            cd /home/ubuntu/compose/infra
            docker compose pull || true
            docker compose up -d --force-recreate

      - name: 🚀 Blue-Green Deploy (Spring Boot) + Nginx 스위치 (직렬락/큐잉)
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_KEY }}
          command_timeout: 30m
          script: |
            set -Eeuo pipefail

            # === 배포 락 (최대 15분 대기, 권한 보정) ===
            sudo mkdir -p /var/lock || true
            sudo touch /var/lock/springboot-cd.lock || true
            sudo chown "$USER":"$USER" /var/lock/springboot-cd.lock || true
            exec 200>/var/lock/springboot-cd.lock
            flock -w 900 200 || { echo "⏳ 다른 배포 대기 타임아웃(15m) → 종료"; exit 1; }
            trap 'flock -u 200' EXIT
            # =========================================

            IMAGE=${{ secrets.DOCKERHUB_USERNAME }}/springboot-app:latest

            # 🔍 현재 Nginx가 바라보는 포트로 롤 결정 (reverse.conf 안의 proxy_pass)
            CURRENT_PORT=$(grep -oE 'localhost:808[12]' /etc/nginx/conf.d/reverse.conf | head -n1 | cut -d: -f2 || true)
            if [ "$CURRENT_PORT" = "8081" ]; then
              # 현재 8081(blue) 서비스 중 → green 신규
              NEW_CONTAINER="springboot-green"; OLD_CONTAINER="springboot-blue"
              NEW_PORT=8082; OLD_PORT=8081
            else
              # 현재 8082(green) 또는 미설정 → blue 신규
              NEW_CONTAINER="springboot-blue"; OLD_CONTAINER="springboot-green"
              NEW_PORT=8081; OLD_PORT=8082
            fi

            echo "[📄] 운영용 application.yml 복원"
            printf '%s' "${{ secrets.CD_YML }}" | base64 -d > /home/ubuntu/application.yml

            echo "[🌐] core-services-net 보장"
            docker network create core-services-net >/dev/null 2>&1 || true

            echo "[⬇️] 이미지 Pull"
            docker pull "$IMAGE"

            # === 동일 이미지면 스킵 (digest 우선, 폴백 ImageID) ===
            NEW_DIGEST="$(docker inspect --format='{{index .RepoDigests 0}}' "$IMAGE" 2>/dev/null | awk -F'@' '{print $2}')"
            OLD_DIGEST=""; OLD_IMAGE_ID=""
            if docker ps -a --format '{{.Names}}' | grep -q "^$OLD_CONTAINER$"; then
              OLD_IMAGE_ID="$(docker inspect --format='{{.Image}}' "$OLD_CONTAINER" 2>/dev/null || true)"
              OLD_DIGEST="$(docker inspect --format='{{index .RepoDigests 0}}' "$OLD_IMAGE_ID" 2>/dev/null | awk -F'@' '{print $2}' || true)"
            fi

            if [ -n "$NEW_DIGEST" ] && [ -n "$OLD_DIGEST" ] && [ "$NEW_DIGEST" = "$OLD_DIGEST" ]; then
              echo "ℹ️ 기존과 동일한 이미지(digest=$NEW_DIGEST) → 배포 스킵"
              exit 0
            fi

            if [ -z "$NEW_DIGEST" ] && [ -n "$OLD_IMAGE_ID" ]; then
              NEW_IMAGE_ID="$(docker inspect --format='{{.Id}}' "$IMAGE" 2>/dev/null || true)"
              if [ -n "$NEW_IMAGE_ID" ] && [ "$NEW_IMAGE_ID" = "$OLD_IMAGE_ID" ]; then
                echo "ℹ️ 기존과 동일한 이미지(ImageID) → 배포 스킵"
                exit 0
              fi
            fi
            # ============================================

            # 혹시 이전 실패 잔재가 있으면 제거
            docker stop "$NEW_CONTAINER" >/dev/null 2>&1 || true
            docker rm   "$NEW_CONTAINER" >/dev/null 2>&1 || true

            echo "[🆕] 새 컨테이너 실행: $NEW_CONTAINER (alias: springboot)"
            docker run -d --name "$NEW_CONTAINER" \
              --network core-services-net \
              --network-alias springboot \
              -p $NEW_PORT:8080 \
              -v /home/ubuntu/application.yml:/config/application.yml \
              -e "SPRING_CONFIG_LOCATION=file:/config/application.yml" \
              -e "SERVER_ADDRESS=0.0.0.0" \
              "$IMAGE"

            # ✅ 부팅 안정형 헬스체크: liveness → readiness, 유예+백오프+폴백 포함
            echo "[⏳] Health check (phase1=liveness, phase2=readiness)"
            sleep 3

            HEALTH_OK=0

            CONTEXT_PATH=$(docker inspect --format='{{range .Config.Env}}{{println .}}{{end}}' "$NEW_CONTAINER" \
              | grep -E '^SERVER_SERVLET_CONTEXT_PATH=' | cut -d'=' -f2- || true)
            if [ -z "${CONTEXT_PATH:-}" ]; then CONTEXT_PATH=""; fi

            # Phase 1: LIVENESS
            LIVENESS_URL="http://localhost:$NEW_PORT${CONTEXT_PATH}/actuator/health/liveness"
            for i in {1..60}; do
              BODY=$(curl -fsS "$LIVENESS_URL" || true)
              if echo "$BODY" | grep -q '"status"\s*:\s*"UP"'; then
                echo "✅ Liveness OK"; break
              fi
              if [ $((i % 6)) -eq 0 ]; then
                echo "[hint] 부팅 중일 수 있음. 최근 로그:"; docker logs --tail=20 "$NEW_CONTAINER" || true
              fi
              echo "⏱ waiting liveness... ($i/60)"; sleep 3
            done

            # Phase 2: READINESS (점진 백오프)
            READINESS_URL="http://localhost:$NEW_PORT${CONTEXT_PATH}/actuator/health/readiness"
            ATTEMPTS=0; MAX_ATTEMPTS=60; SLEEP=3
            while [ $ATTEMPTS -lt $MAX_ATTEMPTS ]; do
              ATTEMPTS=$((ATTEMPTS+1))
              BODY=$(curl -fsS "$READINESS_URL" || true)
              if echo "$BODY" | grep -q '"status"\s*:\s*"UP"'; then
                HEALTH_OK=1; echo "✅ Readiness OK"; break
              fi
              # readiness 없을 때 폴백: /health
              if [ $((ATTEMPTS % 5)) -eq 0 ]; then
                FB=$(curl -fsS "http://localhost:$NEW_PORT${CONTEXT_PATH}/actuator/health" || true)
                if echo "$FB" | grep -q '"status"\s*:\s*"UP"'; then
                  HEALTH_OK=1; echo "✅ Health OK (fallback)"; break
                fi
              fi
              echo "⏱ waiting readiness... ($ATTEMPTS/$MAX_ATTEMPTS)"; sleep $SLEEP
              if [ $SLEEP -lt 8 ] ; then SLEEP=$((SLEEP+1)); fi
            done

            if [ "$HEALTH_OK" -ne 1 ]; then
              echo "❌ Health check 실패 → 롤백"
              docker logs --tail=200 "$NEW_CONTAINER" || true
              docker stop "$NEW_CONTAINER" >/dev/null 2>&1 || true
              docker rm   "$NEW_CONTAINER" >/dev/null 2>&1 || true
              exit 1
            fi

            # 🔀 실제 Nginx 스위치 (현재 포트와 다를 때만 교체)
            if grep -q "localhost:$OLD_PORT" /etc/nginx/conf.d/reverse.conf; then
              echo "[🔀] Nginx 프록시 포트 $OLD_PORT → $NEW_PORT 스위치"
              sudo sed -i "s/localhost:$OLD_PORT/localhost:$NEW_PORT/" /etc/nginx/conf.d/reverse.conf
              sudo nginx -t && sudo systemctl reload nginx
            else
              echo "ℹ️ Nginx는 이미 :$NEW_PORT를 바라보고 있음 → 스위치 생략"
            fi

            echo "[🧹] 이전 컨테이너 정리"
            if docker ps -a --format '{{.Names}}' | grep -q "^$OLD_CONTAINER$"; then
              docker network disconnect core-services-net "$OLD_CONTAINER" >/dev/null 2>&1 || true
              docker stop "$OLD_CONTAINER" >/dev/null 2>&1 || true
              docker rm   "$OLD_CONTAINER" >/dev/null 2>&1 || true
            fi

            echo "[✅] 배포 완료: $NEW_CONTAINER on :$NEW_PORT"

      - name: 🧽 이미지 정리
        if: always()
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_KEY }}
          command_timeout: 30m
          script: |
            docker image prune -f || true
